@inherits MdcInputComponentBase<DateTime>
@inject IJSRuntime jsRuntime



<div @ref="elementReference" class="mdc-select @mainDivClass">
    <div class="mdc-select__anchor">
        <i class="mdc-select__dropdown-icon"></i>
        <div class="mdc-select__selected-text" role="button" aria-haspopup="listbox" aria-labelledby="@labelId" aria-disabled="Disabled">@initialText</div>

        @if (myInputStyle == MdcSelectInputStyle.Outlined)
        {
            <span class="mdc-notched-outline">
                <span class="mdc-notched-outline__leading"></span>
                <span class="mdc-notched-outline__notch">
                    <span id="@labelId" class="mdc-floating-label mdc-floating-label--float-above">@Label</span>
                </span>
                <span class="mdc-notched-outline__trailing"></span>
            </span>
        }
        else
        {
            <span id="@labelId" class="mdc-floating-label mdc-floating-label--float-above">@Label</span>
            <div class="mdc-line-ripple"></div>
        }
    </div>

    <div class="mdc-select__menu mdc-menu mdc-menu-surface bmdc-dp-menu__surface-adjust">
        <MdcDatePickerPanel @bind-Value="@CurrentValue" DateSelectionCriteria="@DateSelectionCriteria" MinDate="@MinDate" MaxDate="@MaxDate" />
    </div>
</div>



@code {
    [CascadingParameter]
    private MdcCascadingDefaults MdcCascadingDefaults { get; set; }
    private MdcCascadingDefaults myCascadingDefaults => (MdcCascadingDefaults is null) ? new MdcCascadingDefaults() : MdcCascadingDefaults;


    [Parameter] public MdcSelectInputStyle? InputStyle { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public MdcDateSelectionCriteria? DateSelectionCriteria { get; set; }
    [Parameter] public DateTime MinDate { get; set; }
    [Parameter] public DateTime MaxDate { get; set; }


    private ElementReference elementReference;
    private DotNetObjectReference<MdcDatePicker> objectReference;
    private MdcSelectInputStyle myInputStyle;
    private string labelId = Utilities.GenerateCssElementSelector();
    private string mainDivClass = "";
    private string initialText = "";
    private DateTime initialValue;
    private DateTime cachedCurrentValue;
    private bool isOpen { get; set; } = false;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        objectReference = DotNetObjectReference.Create(this);

        SetParameters(true);
    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        SetParameters();
    }


    private void SetParameters(bool initialize = false)
    {
        // All values that are bound to HTML are set once at initialization and then left unchanged
        // because allowing Blazor to re-render conflicts with the Material Theme js rendering. This
        // results in the floating label jumping to the wrong place.
        if (initialize || Value != cachedCurrentValue)
        {
            myInputStyle = (InputStyle is null) ? myCascadingDefaults.SelectInputStyle : (MdcSelectInputStyle)InputStyle;
            initialValue = Value;
            cachedCurrentValue = Value;
            initialText = Utilities.DateToString(Value);
            mainDivClass = ((myInputStyle == MdcSelectInputStyle.Outlined) ? " mdc-select--outlined" : "") +
                            (Disabled ? " mdc-select--disabled" : "");
        }
    }


    [JSInvokable("NotifyClosedAsync")]
    public async Task NotifyClosedAsync()
    {
        SetParameters(true);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("BlazorMdc.datePicker.init", elementReference, objectReference);
        }
    }
}
