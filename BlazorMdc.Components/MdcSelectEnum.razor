@* A presently failed experiment because TEnum cannot be constrained for a @typeparam until .NET 5 *@
@*@typeparam TEnum

@inherits MdcSelectBase<TEnum>

<MdcSelect Label="Label" @bind-Value="StrValue" Items="Items" InputStyle="InputStyle"></MdcSelect>



@code {
    //private TEnum _value;
    //[Parameter]
    //public TEnum Value
    //{
    //    get => _value;
    //    set
    //    {
    //        if (value.ToString() != _value.ToString())
    //        {
    //            _value = value;
    //            ValueChanged.InvokeAsync(value);
    //        }
    //    }
    //}

    //[Parameter] public EventCallback<TEnum> ValueChanged { get; set; }
    [Parameter] public IEnumerable<MdcSelect.Item> Items { get; set; }
    [Parameter] public string Label { get; set; } = typeof(TEnum).Name; //.ToDisplayLabel();
    [Parameter] public string Style { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public MdcInputStyle InputStyle { get; set; } = MdcInputStyle.Filled;




    //private string strValue
    //{
    //    get => Value.ToString();
    //    set
    //    {
    //        //Value = getEnumStringEnumType<TEnum>(value ?? "");
    //        //Value = ParseEnum<TEnum>(value);
    //        //TEnum result = default(TEnum);

    //        Enum.TryParse<TEnum>(value, true, out var result);
    //    }
    //}

    private T getEnumStringEnumType<T>(string value) where T : struct, IConvertible
    {
        T resultInputType = default(T);
        bool enumParseResult = false;

        enumParseResult = Enum.TryParse<T>(value, out resultInputType);

        return resultInputType;
    }

    private T ParseEnum<T>(string item, bool ignorecase = default(bool))
            where T : struct
    {
        T tenumResult = default(T);
        return Enum.TryParse<T>(item, ignorecase, out tenumResult) ?
               tenumResult : default(T);
    }
}*@
