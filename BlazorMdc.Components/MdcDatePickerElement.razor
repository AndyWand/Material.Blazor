@if (disabled)
{
    <span class="mdc-theme--text-disabled-on-background dmdc-dp-day-pad__element-disabled">@day</span>
}
else if (DisplayDate == CurrentDate)
{
    <div class="dmdc-dp-day-pad__element-container">
        <div class="dmdc-dp-day-pad__element-overlay" style="color: red;">@day</div>
        <li class="mdc-list-item mdc-list-item--selected dmdc-dp-day-pad__element" data-value="@text" aria-selected="true" role="option" @onclick="@OnClickAsync">
            <span class="mdc-list-item__text dmdc-dp-day-pad__element-span">@text</span>
        </li>
    </div>
}
else
{
    <div class="dmdc-dp-day-pad__element-container">
        <div class="dmdc-dp-day-pad__element-overlay">@day</div>
        <li class="mdc-list-item dmdc-dp-day-pad__element" data-value="@text" aria-selected="false" role="option" @onclick=@OnClickAsync>
            <span class="mdc-list-item__text dmdc-dp-day-pad__element-span">@text</span>
        </li>
    </div>
}


@code {
    [CascadingParameter(Name = "MdcCascadingDefaults")]
    private MdcCascadingDefaults MdcCascadingDefaults { get; set; } = new MdcCascadingDefaults();
    private MdcCascadingDefaults myCascadingDefaults => (MdcCascadingDefaults is null) ? new MdcCascadingDefaults() : MdcCascadingDefaults;
    
    
    [Parameter] public DateTime CurrentDate { get; set; }
    [Parameter] public DateTime DisplayDate { get; set; }
    [Parameter] public DateTime StartOfDisplayMonth { get; set; }
    [Parameter] public EventCallback<DateTime> OnItemClickAsync { get; set; }
    [Parameter] public MdcDateSelectionCriteria? DateSelectionCriteria { get; set; }


    private MdcDateSelectionCriteria myCriteria => (DateSelectionCriteria is null) ? myCascadingDefaults.DateSelectionCriteria : (MdcDateSelectionCriteria)DateSelectionCriteria;




    private string text => Utilities.DateToString(DisplayDate);

    private int day => DisplayDate.Day;
    private bool disabled
    {
        get
        {
            if (DisplayDate.Month != StartOfDisplayMonth.Month)
            {
                return true;
            }

            switch (myCriteria)
            {
                case MdcDateSelectionCriteria.WeekendsOnly:
                    return (DisplayDate.DayOfWeek != DayOfWeek.Sunday) && (DisplayDate.DayOfWeek != DayOfWeek.Saturday);

                case MdcDateSelectionCriteria.WeekdaysOnly:
                    return (DisplayDate.DayOfWeek == DayOfWeek.Sunday) || (DisplayDate.DayOfWeek == DayOfWeek.Saturday);
            }

            return false;
        }
    }



    private async Task OnClickAsync()
    {
        await OnItemClickAsync.InvokeAsync(DisplayDate);
    }
}