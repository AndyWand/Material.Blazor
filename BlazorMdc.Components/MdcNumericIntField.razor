@inherits MdcInputComponentBase<int>


<MdcNumericDoubleField  @bind-Value="@dblVal"
                        InputStyle="InputStyle"
                        Label="@Label"
                        NoLabel="@NoLabel"
                        LeadingIcon="@LeadingIcon"
                        TrailingIcon="@TrailingIcon"
                        NumericFormat="@NumericFormat"
                        NumericSingularFormat="@NumericSingularFormat"
                        Magnitude="@Magnitude"
                        Min="@Min"
                        Max="@Max"
                        DecimalPlaces="0"
                        Disabled=@Disabled />


@code {
    [Parameter] public MdcInputStyle? InputStyle { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public bool NoLabel { get; set; } = false;
    [Parameter] public string? LeadingIcon { get; set; }
    [Parameter] public string? TrailingIcon { get; set; }
    [Parameter] public string NumericFormat { get; set; }
    [Parameter] public string? NumericSingularFormat { get; set; }
    [Parameter] public MdcNumericInputMagnitude Magnitude { get; set; } = MdcNumericInputMagnitude.Normal;
    [Parameter] public double? Min { get; set; }
    [Parameter] public double? Max { get; set; }


    //private const string DoublePattern = @"^[-+]?[0-9]*\.?[0-9]+$";
    //private const string PositiveDoublePattern = @"[0-9]*\.?[0-9]+$";
    //private const string IntegerPattern = @"^(\+|-)?\d+$";
    //private const string PositiveIntegerPattern = @"^\d+$";


    //private bool hasFocus { get; set; } = false;
    //private double mult { get; set; } = 1;
    //private double appliedMult => hasFocus ? mult : 1;
    //private int myDecimalPlaces { get; set; } = 0;
    //private Regex regex { get; set; }
    //private string type => hasFocus ? "number" : "text";


    private double dblVal
    {
        get => (double)CurrentValue;
        set => CurrentValue = Convert.ToInt32(Math.Round(value, 0));
    }
}