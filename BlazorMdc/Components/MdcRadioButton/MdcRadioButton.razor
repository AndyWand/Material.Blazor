@namespace BlazorMdc

@typeparam TItem

@inherits MdcInputComponentBase<TItem>

@inject IJSRuntime jsRuntime


<div @ref="@formReference"
     @attributes="AttributesToSplat(SplatType.ClassAndStyleOnly)">

    <div @ref="@radioButtonReference" class="@buttonContainerClass">
        <input class="mdc-radio__native-control @disabledClass"
               type="radio"
               id="@radioId"
               name="@RadioGroupName"
               @onclick="@(_ => OnInternalItemClickAsync())"
               @attributes="AttributesToSplat(SplatType.ExcludeClassAndStyle)">

        <div class="mdc-radio__background">
            <div class="mdc-radio__outer-circle"></div>
            <div class="mdc-radio__inner-circle"></div>
        </div>
        <div class="mdc-radio__ripple"></div>
    </div>
    <label for="@radioId">@Label</label>

</div>

@code{
    //
    //  2020-04-20  Mark Stega
    //              Created (loosely) from MdcRadioButtons
    //
    [Parameter] public TItem CheckedValue { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string ButtonContainerClass { get; set; }
    [Parameter] public bool EnableTouchWrapper { get; set; } = true;
    [Parameter] public string RadioGroupName { get; set; }


    private readonly string radioId = Utilities.GenerateUniqueElementName();
    private ElementReference formReference { get; set; }
    private ElementReference radioButtonReference;
    private string buttonContainerClass;
    private string disabledClass = "";


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ForceShouldRenderToTrue = true;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (string.IsNullOrEmpty(RadioGroupName))
        {
            throw new ArgumentException("RadioGroupName is a required parameter in MdcRadioButton.");
        }

        ClassMapper
            .Add("mdc-form-field");

        if (EnableTouchWrapper)
        {
            buttonContainerClass = "mdc-radio mdc-radio--touch";
        }
        else
        {
            buttonContainerClass = "mdc-radio";
        }

        if (!string.IsNullOrWhiteSpace(ButtonContainerClass))
        {
            buttonContainerClass += " " + ButtonContainerClass;
        }

        if (Disabled)
        {
            disabledClass = " mdc-radio--disabled";
        }
    }


    protected override void ValueSetter()
    {
        InvokeAsync(async () => await jsRuntime.InvokeAsync<object>("BlazorMdc.radioButton.setChecked", radioButtonReference, Value.Equals(CheckedValue)).ConfigureAwait(false));
    }


    private async Task OnInternalItemClickAsync()
    {
        ReportingValue = CheckedValue;
        await Task.CompletedTask;
    }


    private protected override async Task InitializeMdcComponent()
    {
        await jsRuntime.InvokeAsync<object>(
            "BlazorMdc.radioButton.init",
            radioButtonReference,
            formReference,
            Value.Equals(CheckedValue)).ConfigureAwait(false);
    }

}
