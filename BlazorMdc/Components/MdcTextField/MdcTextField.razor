@namespace BlazorMdc

@inherits MdcInputComponentBase<string>

@inject IJSRuntime jsRuntime


<div @ref="TextFieldReference"
     @attributes="@AttributesToSplat(SplatType.ClassAndStyleOnly)">

    @if (appliedTextInputStyle == MdcTextInputStyle.Filled || appliedTextInputStyle == MdcTextInputStyle.FullWidth)
    {
        <span class="mdc-text-field__ripple"></span>
    }

    @LeadingIconMarkup
    <input @ref="@inputReference"
           id="@Id"
           class="mdc-text-field__input @Utilities.GetTextAlignClass(CascadingDefaults.AppliedStyle(TextAlignStyle)) @FieldClass"
           @bind="@ReportingValue"
           @attributes="@AttributesToSplat(SplatType.ExcludeClassAndStyle)">

    @TrailingIconMarkup

    @if (appliedTextInputStyle == MdcTextInputStyle.Outlined)
    {
        <span class="mdc-notched-outline">
            <span class="mdc-notched-outline__leading"></span>

            @if (!NoLabel)
            {
                <span class="mdc-notched-outline__notch">
                    <span class="mdc-floating-label @floatingLabelClass" for="@Id" id="@labelId">@Label</span>
                </span>
            }

            <span class="mdc-notched-outline__trailing"></span>
        </span>
    }
    else
    {
        @if (appliedTextInputStyle == MdcTextInputStyle.Filled && ! NoLabel)
        {
            <span class="mdc-floating-label @floatingLabelClass" for="@Id" id="@labelId">@Label</span>
        }

        <span class="mdc-line-ripple"></span>
    }
</div>

@code {
    //
    //  2020-04-02  Mark Stega
    //              Changed to use class & style mappers
    //
    //  2020-04-13  Mark Stega
    //              Moved ClassMapper to constructor
    //

#nullable enable annotations
    [Parameter] public MdcTextInputStyle? TextInputStyle { get; set; }
    [Parameter] public MdcTextAlignStyle? TextAlignStyle { get; set; }
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public bool NoLabel { get; set; } = false;
    [Parameter] public string? LeadingIcon { get; set; }
    [Parameter] public string? TrailingIcon { get; set; }
    [Parameter] public IMdcIconFoundry? IconFoundry { get; set; }
#nullable restore annotations


    private MdcTextInputStyle appliedTextInputStyle => CascadingDefaults.AppliedStyle(TextInputStyle);
    internal ElementReference TextFieldReference;
    private ElementReference inputReference;
    private string labelId = Guid.NewGuid().ToString();
    private string floatingLabelClass;
    private MarkupString LeadingIconMarkup;
    private MarkupString TrailingIconMarkup;
    private Dictionary<string, object> attributes;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        ClassMapper
            .Add($"mdc-text-field {FieldClass} {CascadingDefaults.TextFieldCssClass}")
            .AddIf("mdc-text-field--filled", () => appliedTextInputStyle == MdcTextInputStyle.Filled)
            .AddIf("mdc-text-field--outlined", () => appliedTextInputStyle == MdcTextInputStyle.Outlined)
            .AddIf("mdc-text-field--filled mdc-text-field--fullwidth", () => appliedTextInputStyle == MdcTextInputStyle.FullWidth)
            .AddIf("mdc-text-field--no-label", () => NoLabel)
            .AddIf("mdc-text-field--disabled", () => IsDisabled)
            .AddIf("mdc-text-field--with-leading-icon", () => !(LeadingIcon is null))
            .AddIf("mdc-text-field--with-trailing-icon", () => !(TrailingIcon is null));


        if (!NoLabel && appliedTextInputStyle != MdcTextInputStyle.FullWidth)
        {
            ComponentSetAttributes.Add("aria-labelledby", labelId);
        }
        else if (!string.IsNullOrWhiteSpace(Label))
        {
            ComponentSetAttributes.Add("aria-label", Label);
        }

        ForceShouldRenderToTrue = true;
    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var leading = new MdcIcon(CascadingDefaults, (string)LeadingIcon, IconFoundry);
        var trailing = new MdcIcon(CascadingDefaults, (string)TrailingIcon, IconFoundry);

        LeadingIconMarkup = (MarkupString)((LeadingIcon is null) ? "" : $"<i class=\"{leading.Class} mdc-text-field__icon mdc-text-field__icon--leading\" tabindex=\"-1\" role=\"button\">{leading.Text}</i>");
        TrailingIconMarkup = (MarkupString)((TrailingIcon is null) ? "" : $"<i class=\"{trailing.Class} mdc-text-field__icon mdc-text-field__icon--trailing\" tabindex=\"-1\" role=\"button\">{trailing.Text}</i>");
        floatingLabelClass = string.IsNullOrEmpty(ReportingValue) ? "" : "mdc-floating-label--float-above";
    }


    protected override async Task InitializeMdcComponent() => await jsRuntime.InvokeAsync<object>("BlazorMdc.textField.init", TextFieldReference);


    internal async Task Select()
    {
        await jsRuntime.InvokeAsync<object>("BlazorMdc.textField.select", inputReference);
    }
}
